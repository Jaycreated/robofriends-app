{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","props","className","alt","src","name","email","CardList","robots","map","user","i","id","SearchBox","searchField","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","searchfield","target","value","console","log","state","fetch","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Fragment","Component","ReactDOM","render","document","getElementById"],"mappings":"gMAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,mCCQCQ,EAbF,SAACC,GACT,OACI,sBAAKC,UAAW,sDAAhB,UACG,qBAAKC,IAAM,SAASC,IAAM,oCAE9B,gCACK,6BAAKH,EAAMI,OACX,4BAAIJ,EAAMK,eCaRC,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACE,8BAEIA,EAAOC,KAAI,SAACC,EAAMC,GACZ,OACE,cAAC,EAAD,CAEEC,GAAIJ,EAAOG,GAAGC,GACdP,KAAMG,EAAOG,GAAGN,KAChBC,MAAOE,EAAOG,GAAGL,OAHZK,SCITE,EAZG,SAAC,GAAmC,EAAjCC,YAAkC,IAApBC,EAAmB,EAAnBA,aAC/B,OACI,qBAAKb,UAAU,MAAf,SAEA,uBAAOc,KAAK,SACVC,YAAY,gBACZf,UAAW,6BACXgB,SAAUH,OC0CNI,G,wDA3CX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,QAC1CC,QAAQC,IAAIN,EAAMG,OAAOC,QAdzB,EAAKG,MAAQ,CACTpB,OAAQ,GACRe,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OAChBM,MAAM,8CACLnC,MAAK,SAAAoC,GAAQ,OAAGA,EAASC,UACzBrC,MAAK,SAAAsC,GAAK,OAAG,EAAKV,SAAS,CAAEd,OAAQwB,S,oBAQ1C,WACI,MAAgCC,KAAKL,MAA7BpB,EAAR,EAAQA,OAAQe,EAAhB,EAAgBA,YACVW,EAAiB1B,EAAO2B,QAAO,SAAAC,GACjC,OAAOA,EAAM/B,KAAKgC,cAAcC,SAASf,EAAYc,kBAEzD,OAAQ7B,EAAO+B,OAGP,cAAC,IAAMC,SAAP,UAEI,sBAAKtC,UAAU,KAAf,UACI,6CACA,cAAC,EAAD,CAAWa,aAAckB,KAAKb,iBAC9B,iCACC,cAAC,EAAD,CAAUZ,OAAQ0B,WAR/B,6C,GA1BMO,cCAlBC,IAASC,OACJ,cAAC,EAAD,IACAC,SAASC,eAAe,SAM7BtD,M","file":"static/js/main.e8e97d62.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n"," import React from 'react'\n\nconst Card = (props) => {\n     return (\n         <div className= 'tc bg-light-green dib br3 pa4 ma2 bw2 grow shadow-8'>\n            <img alt = 'robots' src = 'https://robohash.org/id?200x200'/>\n          \n        <div>\n             <h2>{props.name}</h2>\n             <p>{props.email}</p>\n           </div>\n         </div>\n     );\n};\n\nexport default Card;","import React from 'react'\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n      <div>\n         {\n          robots.map((user, i) => {\n                return (\n                  <Card\n                    key={i} \n                    id={robots[i].id} \n                    name={robots[i].name} \n                    email={robots[i].email} \n                    />\n                );\n            })\n         }\n      </div>\n    );\n}\n\nexport default CardList "," import React from 'react'\n\n const SearchBox = ({ searchField,  searchChange }) => {\n     return (\n         <div className='pa2'>\n\n         <input type='search'\n           placeholder='search robots'\n           className ='pa3 b--green bg-light-blue'\n           onChange={searchChange} /> \n        </div>\n     )\n }\n\n export default SearchBox   ","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox.js';\n//import { robots } from './robots.js';\nimport '../components/Scroll.js';\nimport './App.css';\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n            \n        }\n    }\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=> response.json())\n        .then(users=> this.setState({ robots: users  }));\n    }\n \n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n        console.log(event.target.value);\n    }\n\n    render() {\n        const { robots, searchfield } = this.state\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n        return !robots.length ?\n            <h1>Loading</h1> :\n         (\n                <React.Fragment>\n        \n                    <div className='tc'>\n                        <h1>RoboFriends</h1>\n                        <SearchBox searchChange={this.onSearchChange} />\n                        <scroll>\n                         <CardList robots={filteredRobots} />\n                        </scroll>   \n                    </div>\n                </React.Fragment>\n             );\n            }\n    }\n\n\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals'\nimport App from './containers/App.js';\n//import reactDom from 'react-dom';\n\nReactDOM.render(\n     <App />,\n     document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}